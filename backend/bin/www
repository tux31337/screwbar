#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const app = require('../app');
 const debug = require('debug')('helloworldapp:server');
 const config = require('../config/config.js');
 const http = require('http');
const { Server } = require('socket.io');
 
 /**
  * Get port from environment and store in Express.
  */
 
 const port = normalizePort(config.host.port || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 const server = http.createServer(app);

 //socket서버에 서버를 담음.
 const socket = new Server(server, {
   cors: {
    origin: '*',
   },
 });
 socket.on('connection', (socket) => {
   console.log(socket.id);
   console.log('Client is here!');
   socket.on("enter_room", (roomName, done) => {
     socket.join(roomName);
     done(`back end 에서 보내는 메시지`);
     socket.to(roomName).emit("welcome");
   });
 });

 
 /**
  * Listen on provided port, on all network interfaces.
  */
 console.log(`Server is started... 127.0.0.1:${port}`)
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 