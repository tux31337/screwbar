#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const app = require('../app');
 const debug = require('debug')('helloworldapp:server');
 const config = require('../config/config.js');
 const http = require('http');
 const { initSocket } = require('../socket/socket.js');
 const { Server } = require('socket.io');
 const createChat = require('../middlewares/chat/chatService.js')

 
 /**
  * Get port from environment and store in Express.
  */
 
 const port = normalizePort(config.host.port || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 const server = http.createServer(app);
 console.log(initSocket())
 initSocket(server);
 //socket서버에 서버를 담음.
//  const sockets = new Server(server, {
//    cors: {
//     origin: '*',
//    },
//  });
// /**
//  * 소켓테스트
//  */


// let login_ids = {};

// sockets.on('connection', (socket) => {
//   // console.log("connection info =>" + JSON.stringify(socket.request.connection._peername));
//   socket.remoteAddress = socket.request.connection._peername.address;
//   socket.remotePort = socket.request.connection._peername.port;


//   socket.on('login', (input) => {
//     console.log('login 받음 =>' + JSON.stringify(input));
//     console.log(input);
//     login_ids[input] = socket.id;
//     socket.login_id = input.id;

//     sendResponse(socket, 'login', 200, 'OK');
//   })

//   socket.on('message', (message) => {

//     if(message.recepient == 'all') {
//       console.log('모든 클라이언트에게 메시지 전송');
//       sockets.emit('message', message);
//     } else {
//       console.log(login_ids[message.recepient]);
//       console.log(sockets.connected);
//       if (login_ids[message.recepient]) {
//         sockets.to(login_ids[message.recepient]).emit('message', message);
//         sendResponse(socket, 'message', 200, 'OK');
//       } else {
//         createChat(11);
//         sendResponse(socket, 'message', 400, '상대방 ID를 찾을 수 없습니다');
//       }
//     }
//   });
// });

// function sendResponse(socket, command, code, message) {
//   let output = {
//     command: command,
//     code: code,
//     message: message
//   };
//   socket.emit('response', output);
// }

 
 /**
  * Listen on provided port, on all network interfaces.
  */

 console.log(`Server is started... 127.0.0.1:${port}`)
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 